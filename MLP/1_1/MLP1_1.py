{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"MLP1_1.py","version":"0.3.2","views":{},"default_view":{},"provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"metadata":{"id":"5T2UjTAoJA7K","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0},"output_extras":[{"item_id":1},{"item_id":2}],"base_uri":"https://localhost:8080/","height":446},"outputId":"455bac2d-8553-4524-9bce-508178737748","executionInfo":{"status":"ok","timestamp":1520304676522,"user_tz":-480,"elapsed":175420,"user":{"displayName":"Di Zhang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s128","userId":"107078777285857358851"}}},"cell_type":"code","source":["import torch\n","import torch.nn as nn\n","import torch.optim as optim\n","import torch.nn.functional as F\n","from torch.autograd import Variable\n","import torchvision\n","import torchvision.datasets as datasets\n","import torchvision.transforms as transforms\n","import matplotlib.pyplot as plot\n","import numpy as np\n","\n","# hyper parameters\n","train_num = 50000\n","batch_size = 40\n","epochs = 10\n","learning_rate = 1e-2\n","momentum = 0.9\n","average_loss =Variable(torch.zeros(epochs, 3))\n","\n","\n","# download mnist dataset\n","train_dataset = datasets.MNIST(root = './MNIST', train = True, transform = transforms.ToTensor(), download = True)\n","test_dataset = datasets.MNIST(root = './MNIST', train = False, transform = transforms.ToTensor(), download = True)\n","\n","train_loader = torch.utils.data.DataLoader(\n","\t\t\t\t\t\t\t\t\t\t   dataset = train_dataset, \n","\t\t\t\t\t\t\t\t\t\t   batch_size = batch_size,\n","\t\t\t\t\t\t\t\t\t\t   shuffle = True)\n","test_loader = torch.utils.data.DataLoader(\t\n","\t\t\t\t\t\t\t\t\t\t   dataset = test_dataset,\n","\t\t\t\t\t\t\t\t\t\t   batch_size = batch_size,\n","\t\t\t\t\t\t\t\t\t\t   shuffle = False)\n","\n","# MLP network with two hidden layers\n","# input: features\n","# n_hidden_1: total number of first hidden layer units\n","# n_hidden_2: total number of second hidden layer units\n","# output: output\n","class MLP(nn.Module):\n","\tdef __init__(self, input, n_hidden_1, n_hidden_2, output):\n","\t\tsuper(MLP, self).__init__()\n","\t\tself.hidden_1 = nn.Linear(input, n_hidden_1)\n","\t\tself.hidden_2 = nn.Linear(n_hidden_1, n_hidden_2)\n","\t\tself.output = nn.Linear(n_hidden_2, output)\n","\n","\tdef forward(self, x):\n","\t\tx = F.relu(self.hidden_1(x))\n","\t\tx = F.relu(self.hidden_2(x))\n","\t\treturn F.log_softmax(self.output(x),dim = 1)\n","\n","# input dimensions\n","model = MLP(28*28, 500, 250, 10)\n","print (model)\n","\n","# initialize bias\n","nn.init.constant(model.hidden_1.bias, 0)\n","nn.init.constant(model.hidden_2.bias, 0)\n","nn.init.constant(model.output.bias, 0)\n","\n","if torch.cuda.is_available():\n","\tmodel = model.cuda()\n","\n","optimizer = optim.SGD(model.parameters(), lr = learning_rate, momentum= momentum)\n","loss_function = nn.CrossEntropyLoss()\n","\n","# 3 methods to initialize weights\n","for init in range(3):\n","\t# initialize weights to Zero\n","\tif init == 0:\n","\t\tnn.init.constant(model.hidden_1.weight, 0)\n","\t\tnn.init.constant(model.hidden_2.weight, 0)\n","\t\tnn.init.constant(model.output.weight, 0)\n","\n","\t# initialize weights to Normal\n","\telif init == 1:\n","\t\tnn.init.normal(model.hidden_1.weight, mean = 0, std = 1)\n","\t\tnn.init.normal(model.hidden_2.weight, mean = 0, std = 1)\n","\t\tnn.init.normal(model.output.weight, mean = 0, std = 1)\n","\t\n","\t# initialize weights to Glorot\n","\telse:\n","\t\tnn.init.xavier_uniform(model.hidden_1.weight, gain = 1)\n","\t\tnn.init.xavier_uniform(model.hidden_2.weight, gain = 1)\n","\t\tnn.init.xavier_uniform(model.output.weight, gain = 1)\n","\n","\t# iterations in epochs\n","\tfor epoch in range(epochs):\n","\t\t#print('epoch = %d' % epoch)\n","\t\tloss = 0\n","\n","\t\tfor batch_index, (images, labels) in enumerate(train_loader):\n","\t\t\t# set initial gradient to Zero firstly\n","\t\t\toptimizer.zero_grad()\n","\t\t\t\n","\t\t\tif torch.cuda.is_available():\n","\t\t\t\timages = images.cuda()\n","\t\t\t\tlabels = labels.cuda()\n","\t\t\t\n","\t\t\timages = Variable(images.view(-1, 28*28))\n","\t\t\tlabels = Variable(labels)\n","\n","\t\t\t# train dataset with 50000 training samples\n","\t\t\tif (batch_index*batch_size ) < train_num:\n","\t\t\t\tprediction = model(images)\n","\t\t\t\tloss = loss_function(prediction, labels)\n","\t\t\t\taverage_loss[epoch, init] = average_loss[epoch, init] + loss.data[0]\n","\n","\n","\t\t\t\tloss.backward()\n","\t\t\t\toptimizer.step()\n","\n","\t\t\t\t# print 10 loss value of each epoch\n","\t\t\t\t#if (10 * batch_index) % (train_num / batch_size) == 0:\n","\t\t\t\t\t#print('current loss = %.5f' % loss.data[0])\n","\n","\n","\n","\t\taverage_loss[epoch, init] = average_loss[epoch, init] / (train_num / batch_size)\n","\t\t#print(average_loss[epoch, init])\n","\n","\t\t\t\n","x_axis = np.linspace(0, 1, 10)\n","plot.plot(x_axis, average_loss.data.numpy()[:,0], label = 'initialize weights to Zero', color ='r', lw=2)\n","plot.plot(x_axis, average_loss.data.numpy()[:,1], label = 'initialize weights to Normal', color = 'g', lw=2)\n","plot.plot(x_axis, average_loss.data.numpy()[:,2], label = 'initialize weights to Glorot', color = 'b', lw=2)\n","plot.xlabel(\"number of epochs\")\n","plot.ylabel(\"average loss\")\n","plot.legend()\n","plot.show()\n","\n"],"execution_count":53,"outputs":[{"output_type":"stream","text":["MLP(\n","  (hidden_1): Linear(in_features=784, out_features=500)\n","  (hidden_2): Linear(in_features=500, out_features=250)\n","  (output): Linear(in_features=250, out_features=10)\n",")\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"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\ni4sLUlJS4OfnZ/YYmZkFVq+rh38PxKfG47dzv6ODU1erH78p4ACghmMfNhz7sOHYh9Zhz4FoNnuf\n9h9//IHNmzcDKBtmX1BQgAceeAC7d+8GAMTExGDAgOqP1rO1Hv49AACJGRyMRkREjsVmoT127Fhk\nZGQgPDwckZGReOuttzB16lR8++23CA8PR1ZWFh577DFbNV+ritDmCHIikitOzWm7qTkXL56PN998\n3WRZxWNbbaW213g7bHZ53MXFBStXrqy2fMuWLbZqsk4qQzsOoiiaPLKOiEgOODWn7abmBICrV68i\nLu4UunXrXu+6pNaknogGAK3dW8PT2RMZRRlIKUhGi2YtLe9ERGRHnJrTtlNzPv/8i1i//t9Yu3a9\nyfKbN1OwdOnbKC0tq3/mzLkQBMFkes733nsXjzwyGgcO7EObNm3QpUsgfv11P1q0aI158xYhKeks\nVq1aBpVKBYVCgYUL37Hqz0aTC21BEBDk0w2Hrh9EQnocQ5uIzAr/4QnsvWzdqTmHthuGz0Zxak6p\npubs1OlOtGjREgcP/oL+/Qcal2/atA6jRj2KIUOGYf/+vdi8eQMmTZpsMj3n6tXL0aVLV4wf/wzG\njBmFkJAh2L59OwYMGIjc3FxkZWXg1VdfR0BAV2zatA4xMT+iX7+BsJYmF9oAEOgThEPXDyI+PR6D\n2z0odTlERLXi1JzWn5oTAJ577gXMnv067r+/n3HZmTOJeOGFKABlU2/+97+byutrYzKrWGBgMARB\ngJeXt3FCEi8vb+Tn58HLywf/+c9aFBcXIS0t1eRKhTU0ydA2PhktjU9GIyLz6npGbCucmtO6U3NW\n8Pdvgd6978GPP/5Q4/6lpTrjvpXTc1avt+rXoijivffexVNPPYP77nsAn332CQoLrfvW5SYzNWdV\nFc8gT8xIkLgSIqLbx6k5y9Rnas6qIiIm4KuvPkNJSQkAIDAwCMeO/QEAOH78z9uaejM7OwutW7dB\nSUkJjhz5DTqdrt7HMKdJnml38Q6EAAFJmWdQoi+Bk7L2mcaIiOSKU3NW1FS3qTlv5eHhgYcfHono\n6G0Ayi6ZL126EN9//y1UKjVmzZpb79AdMyYMs2a9htatW2PMmDCsXr0cgwdb7zaszabmtAZbPKmn\n4sk19356F/7OvoADYYeNZ95UN3yKUsOxDxuOfdhwnJrTOhrF1JxyF+TTDX9nX0BCehxDm4jIDjg1\n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\n","text/plain":["<matplotlib.figure.Figure at 0x7f651f6a2668>"]},"metadata":{"tags":[]}}]}]}